// Generated by CoffeeScript 1.7.1
(function() {
  var animateLoad, insertFeedHtml, stopLoad, stopLoadError;

  insertFeedHtml = function(feedAggregateObject, insertAfter) {
    var args, feedCount, feedObject, i, _i, _len, _ref, _results;
    if (insertAfter == null) {
      insertAfter = "before_feeds";
    }
    feedCount = Object.size(feedAggregateObject.feedData);
    i = 0;
    if (insertAfter.search("#") !== 0) {
      insertAfter = "#" + insertAfter;
    }
    if (!$(insertAfter).exists()) {
      $($(".entry-content")[0]).append("<span id='" + insertAfter + "'></span>");
    }
    _ref = feedAggregateObject.feedData;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      feedObject = _ref[_i];
      if (feedObject.raw === true) {
        continue;
      }
      args = "random=" + feedObject.random + "&decode_entities=" + feedObject.decode_entities + "&limit=" + feedObject.limit + "&override_feed_title=" + feedObject.override_feed_title + "&url=" + feedObject.url;
      console.log("Pinging", "" + feedAggregateObject.embedFeedAsyncTarget + "?" + args);
      _results.push($.get(feedAggregateObject.embedFeedAsyncTarget, args, "json").done(function(result) {
        $(insertAfter).after(result.html);
        return console.log("Loaded feed data from", result.url);
      }).fail(function(result, status) {
        console.error("Failed to get feed data for", feedObject.url);
        return console.warn(result, status);
      }).always(function() {
        i++;
        if (i === feedCount) {
          return stopLoad();
        }
      }));
    }
    return _results;
  };


  /*
   * Helpers
   */

  Object.size = function(obj) {
    var key, size;
    size = 0;
    for (key in obj) {
      if (obj.hasOwnProperty(key)) {
        size++;
      }
    }
    return size;
  };

  jQuery.fn.exists = function() {
    return jQuery(this).length > 0;
  };

  animateLoad = function(d, elId) {
    var big, e, offset, offset2, sm_d, small;
    if (d == null) {
      d = 50;
    }
    if (elId == null) {
      elId = "#status-container";
    }
    try {
      if ($(elId).exists()) {
        sm_d = roundNumber(d * .5);
        big = $(elId).find('.ball');
        small = $(elId).find('.ball1');
        big.removeClass('stop nodisp');
        big.css({
          width: "" + d + "px",
          height: "" + d + "px"
        });
        offset = roundNumber(d / 2 + sm_d / 2 + 9);
        offset2 = roundNumber((d + 10) / 2 - (sm_d + 6) / 2);
        small.removeClass('stop nodisp');
        small.css({
          width: "" + sm_d + "px",
          height: "" + sm_d + "px",
          top: "-" + offset + "px",
          'margin-left': "" + offset2 + "px"
        });
        return true;
      }
      return false;
    } catch (_error) {
      e = _error;
      return console.log('Could not animate loader', e.message);
    }
  };

  stopLoad = function(elId, fadeOut) {
    var big, e, small;
    if (elId == null) {
      elId = "#status-container";
    }
    if (fadeOut == null) {
      fadeOut = 500;
    }
    try {
      if ($(elId).exists()) {
        big = $(elId).find('.ball');
        small = $(elId).find('.ball1');
        big.addClass('bballgood ballgood');
        small.addClass('bballgood ball1good');
        return delay(fadeOut, function() {
          big.addClass('stop nodisp');
          big.removeClass('bballgood ballgood');
          small.addClass('stop nodisp');
          return small.removeClass('bballgood ball1good');
        });
      }
    } catch (_error) {
      e = _error;
      return console.log('Could not stop load animation', e.message);
    }
  };

  stopLoadError = function(elId, fadeOut) {
    var big, e, small;
    if (elId == null) {
      elId = "#status-container";
    }
    if (fadeOut == null) {
      fadeOut = 1500;
    }
    try {
      if ($(elId).exists()) {
        big = $(elId).find('.ball');
        small = $(elId).find('.ball1');
        big.addClass('bballerror ballerror');
        small.addClass('bballerror ball1error');
        return delay(fadeOut, function() {
          big.addClass('stop nodisp');
          big.removeClass('bballerror ballerror');
          small.addClass('stop nodisp');
          return small.removeClass('bballerror ball1error');
        });
      }
    } catch (_error) {
      e = _error;
      return console.log('Could not stop load error animation', e.message);
    }
  };


  /*
   * Onloads
   */

  $(function() {
    var e;
    $("<link/>", {
      rel: "stylesheet",
      type: "text/css",
      media: "screen",
      href: "" + window.feedBlobObject.pluginPath + "js/loadAnimations.css"
    }).appendTo("head");
    try {
      animateLoad();
      return insertFeedHtml(window.feedBlobObject);
    } catch (_error) {
      e = _error;
      console.error("Couldn't insert feed items into page:", e.message);
      console.warn(e.stack);
      return stopLoadError();
    }
  });

}).call(this);
